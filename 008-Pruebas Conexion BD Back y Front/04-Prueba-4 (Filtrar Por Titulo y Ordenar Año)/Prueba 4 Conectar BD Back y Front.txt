index.js
---------------------------
const express = require('express');
const cors = require('cors');
const {Pool} = require('pg');

const app = express();
const port = 3002;

app.use(cors());
app.use(express.json());

const pool = new Pool({
    user: 'postgres',
    host: 'prueba-2.cknylvg9zp2l.us-east-1.rds.amazonaws.com',
    database: 'postgres',
    password: '12345678',
    port: 5432,
    ssl: {
        rejectUnauthorized: false
    }
});

app.get('/peliculas', async (req, res) => {
    const {rows} = await pool.query(`SELECT p.id_pelicula, p.titulo_pelicula, p.director_pelicula, p.anio_pelicula, p.portada_pelicula, g.nombre_genero
                                    FROM peliculas p
                                    JOIN generos g ON p.id_genero = g.id_genero`);
    res.json(rows);
});

app.listen(port, () => {
    console.log(`Servidor corriendo en http://localhost:${port}`);
});


main.js:
----------------------
const listadoPeliculas = document.getElementById('peliculas');
const generoSelect = document.getElementById("genero");
const buscarInput = document.getElementById("buscar");
const buscarBtn = document.getElementById("buscar-button");
const ordenarAscBtn = document.getElementById("ordenar-ascendente");
const ordenarDescBtn = document.getElementById("ordenar-descendente");

let peliculas = [];
let peliculasFiltradas = [];
function inicializar(){
    fetch('http://localhost:3000/peliculas')
    .then(response => response.json())
    .then(data => {
        peliculas = data;
        peliculasFiltradas = [...peliculas];
        mostrarPeliculas(peliculasFiltradas);
        cargarGeneros();
    })
    .catch(error => { console.log("Error al cargar las peliculas", error)});
}
function mostrarPeliculas(lista){
    listadoPeliculas.innerHTML = '';
    if (lista.length === 0) {
        listadoPeliculas.innerHTML = '<p>No hay peliculas</p>';
        return;
    }else{
        lista.forEach(pelicula => {
            const li = document.createElement('li');
            li.innerHTML = `
                <div class="peliculas">
                    <img src="${pelicula.portada_pelicula}" alt="${pelicula.titulo}">
                    <h2>${pelicula.titulo_pelicula}</h2>
                    <p>Director: ${pelicula.director_pelicula}</p>
                    <p>Año: ${pelicula.anio_pelicula}</p>
                    <p>Género: ${pelicula.nombre_genero}</p>
                </div>
                `;
            listadoPeliculas.appendChild(li);
        });
    }
}
function cargarGeneros() {
    generoSelect.innerHTML = '<option value="todos">Todos</option>';
    const generos = [...new Set(peliculas.map(p => p.nombre_genero))];

    generos.forEach(genero => {
        const option = document.createElement("option");
        option.value = genero;
        option.textContent = genero;
        generoSelect.appendChild(option);
    });

    generoSelect.addEventListener("change", () => filtrarPeliculas(generoSelect.value));
}
function filtrarPeliculas(genero) {
    if (genero === "todos") {
        peliculasFiltradas = [...peliculas];
    } else {
        peliculasFiltradas = peliculas.filter(pelicula => pelicula.nombre_genero === genero);
    }
    mostrarPeliculas(peliculasFiltradas);
}

function buscarPorTitulo() {
    const query = buscarInput.value.toLowerCase();
    const peliculasEncontradas = peliculas.filter(pelicula =>
        pelicula.titulo_pelicula.toLowerCase().includes(query)
    );
    mostrarPeliculas(peliculasEncontradas);
}
// Ordenar películas por año
function ordenarPeliculas(ascendente = true) {
    peliculasFiltradas.sort((a, b) => (ascendente ? a.anio_pelicula - b.anio_pelicula : b.anio_pelicula - a.anio_pelicula));
    mostrarPeliculas(peliculasFiltradas);
}

buscarBtn.addEventListener("click", buscarPorTitulo);
ordenarAscBtn.addEventListener("click", () => ordenarPeliculas(true));
ordenarDescBtn.addEventListener("click", () => ordenarPeliculas(false));
inicializar();


index.html:
----------------
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>Prueba 2 Peliculas</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel='stylesheet' type='text/css' media='screen' href='main.css'>
</head>
<body>
    <h1>Lista de Películas</h1>
    <div id="ordenar-por-año">
        <button id="ordenar-ascendente">Ordenar por Año ↓</button>
        <button id="ordenar-descendente">Ordenar por Año ↑</button>
    </div>
    
    <div id="filtrar-titulo">
        <input type="text" id="buscar" placeholder="Buscar por título..."/> <!---Barra de Busqueda-->
        <button id="buscar-button">Buscar</button>
    </div>

    <div id="filtrar-genero">
        <label for="genero">Filtrar por género:</label>
        <select id="genero">
            <option value="todos">Todos</option>
        </select>
    </div>
    
    <div id = "peliculas"></div>
    <script src='main.js'></script>
</body>
</html>


main.css:
-------------
body{
    background-color: rgb(255, 255, 255);
    text-align: center;
    padding: 20px;
    margin: 0px;
    font-family:'Times New Roman', Times, serif;
}

/* Estilos para el encabezado */
h1 {
    font-size: 28px;
    margin-bottom: 20px;
    color: #000000;
}
/* Estilos para el filtro de búsqueda por título */
#filtrar-titulo {
    margin-bottom: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px; /* Espacio entre input y botón */
}

/* Estilo del input de búsqueda */
#buscar {
    padding: 10px;
    width: 250px;
    font-size: 15px;
    border: 1px solid #ccc;
    border-radius: 5px;
    outline: none;
    transition: border-color 0.3s ease;
}

#buscar:focus {
    border-color: #002144;
}

/* Estilo del botón de búsqueda */
#buscar-button {
    padding: 10px 15px;
    font-size: 15px;
    color: white;
    background-color: #00458f;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#buscar-button:hover {
    background-color: #002144;
}
/* Estilos para el contenedor de ordenación */
#ordenar-por-año {
    margin-bottom: 20px;
    display: flex;
    justify-content: center;
    gap: 10px; /* Espacio entre botones */
}

/* Estilos generales para los botones */
#ordenar-por-año button {
    padding: 10px 15px;
    font-size: 16px;
    color: white;
    background-color: #00458f; /* Verde similar a Bootstrap */
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s;
}

/* Hover y efecto de click */
#ordenar-por-año button:hover {
    background-color: #002144;
}

#ordenar-por-año button:active {
    transform: scale(0.95);
}

/* Estilos para el filtro */
#filtrar-genero {
    margin-bottom: 20px;
}

label {
    font-size: 18px;
    margin-right: 10px;
    color: #000000;
}

#genero {
    padding: 8px;
    font-size: 16px;
    border-radius: 5px;
    border: 1px solid #ccc;
    cursor: pointer;
}


#peliculas{
    list-style: none;
    display: flex;
    flex-wrap: wrap;
    padding: 0px;
    justify-content: center;
}

#peliculas li{      
    background-color: rgb(255, 255, 255);
    padding: 20px;
    max-width: 500px;
    border-radius: 8px;
    margin: 10px;
    box-shadow: 0 4px 8px rgba(0.2, 0, 0, 0.2);
    text-align: left;
}

.peliculas img{
    max-height: 350px;
    border-radius: 8px;
    object-fit: cover;
}

.peliculas h2 {
    font-size: 20px;
    color: #000000;
    margin-bottom: 20px;
}

/* Información de las películas */
.peliculas p {
    font-size: 16px;
    color: #000000;
    margin: 10px 0;
}
   